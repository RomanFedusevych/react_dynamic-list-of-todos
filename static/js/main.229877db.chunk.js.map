{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","query","filteredBySelect","changeQuery","event","setState","target","value","changeFilteredBySelect","this","props","todos","selectUser","selectedUserId","filteredTodos","filter","todo","title","toLowerCase","includes","completed","className","type","onChange","placeholder","name","map","checked","readOnly","userId","onClick","id","React","Component","API_URL","loadUsers","a","fetch","response","json","CurrentUser","selectedUser","prevProps","email","phone","clear","App","clearUser","then","data","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.229877db.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[];\n  selectedUserId: number;\n  selectUser: (userId: number) => void;\n};\n\ntype State = {\n  query: string;\n  filteredBySelect: string;\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state = {\n    query: '',\n    filteredBySelect: 'all',\n  };\n\n  changeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      query: event.target.value,\n    });\n  };\n\n  changeFilteredBySelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState({\n      filteredBySelect: event.target.value,\n    });\n  };\n\n  render() {\n    const { todos, selectUser, selectedUserId } = this.props;\n    const { query, filteredBySelect } = this.state;\n    let filteredTodos = todos.filter(\n      todo => todo.title.toLowerCase().includes(query.toLowerCase()),\n    );\n\n    if (this.state.filteredBySelect === 'completed') {\n      filteredTodos = filteredTodos.filter(\n        todo => todo.completed,\n      );\n    }\n\n    if (this.state.filteredBySelect === 'active') {\n      filteredTodos = filteredTodos.filter(\n        todo => !todo.completed,\n      );\n    }\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <input\n            type=\"text\"\n            value={query}\n            onChange={this.changeQuery}\n            className=\"form-control\"\n            placeholder=\"Enter text here\"\n          />\n          <select\n            name=\"filteredBySelect\"\n            value={filteredBySelect}\n            onChange={this.changeFilteredBySelect}\n            className=\"form-select\"\n            aria-label=\"Default select example\"\n          >\n            <option value=\"all\">all</option>\n            <option value=\"active\">active</option>\n            <option value=\"completed\">completed</option>\n          </select>\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map((todo) => (\n              <li\n                key={todo.id}\n                className={`\n                TodoList__item \n                TodoList__item${todo.completed\n                ? '--checked'\n                : '--unchecked'}`}\n              >\n                <label>\n                  <input type=\"checkbox\" checked={todo.completed} readOnly />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={todo.userId === selectedUserId\n                    ? 'TodoList__user-button--selected button'\n                    : 'button'}\n                  type=\"button\"\n                  onClick={() => {\n                    selectUser(todo.userId);\n                  }}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","const API_URL = 'https://mate.academy/students-api';\n\nexport const loadTodos = () => {\n  return fetch(`${API_URL}/todos`)\n    .then(response => response.json());\n};\n\nexport const loadUsers = async (userId: number) => {\n  const response = await fetch(`${API_URL}/users/${userId}`);\n\n  return response.json();\n};\n","import React from 'react';\nimport { loadUsers } from '../../api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  selectedUserId: number;\n  clear: () => void;\n};\n\ntype State = {\n  selectedUser: User | null\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    selectedUser: null,\n  };\n\n  async componentDidMount() {\n    await this.loadUsers();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.selectedUserId !== this.props.selectedUserId) {\n      this.loadUsers();\n    }\n  }\n\n  async loadUsers() {\n    const selectedUser = await loadUsers(this.props.selectedUserId);\n\n    this.setState({ selectedUser });\n  }\n\n  render() {\n    const { selectedUser } = this.state;\n\n    return (\n      selectedUser && (\n        <>\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\"><span>{selectedUser.id}</span></h2>\n\n            <h3 className=\"CurrentUser__name\">{selectedUser.name}</h3>\n            <p className=\"CurrentUser__email\">{selectedUser.email}</p>\n            <p className=\"CurrentUser__phone\">{selectedUser.phone}</p>\n          </div>\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            onClick={this.props.clear}\n          >\n            Clear\n          </button>\n        </>\n      )\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { loadTodos } from './api';\n\ninterface State {\n  todos: Todo[];\n  selectedUserId: number;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    const data = await loadTodos();\n\n    this.setState({\n      todos: data,\n    });\n  }\n\n  selectUser = (userId: number) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectUser={this.selectUser}\n            selectedUserId={selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUserId={selectedUserId}\n                clear={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}